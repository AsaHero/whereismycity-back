definitions:
  models.CreateUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    required:
    - email
    - name
    - password
    - role
    - username
    type: object
  models.Empty:
    type: object
  models.Location:
    properties:
      city:
        type: string
      country:
        type: string
      id:
        type: integer
      latitude:
        type: number
      longitude:
        type: number
      rank_fusion_score:
        type: number
      state:
        type: string
      text_match_score:
        type: integer
      vector_distance:
        type: number
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.PatchProfileRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      username:
        type: string
    type: object
  models.PatchUserRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
      username:
        type: string
    type: object
  models.ProfileResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  models.RefreshTokenRequest:
    properties:
      refresh_token:
        type: string
    required:
    - refresh_token
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.SearchResponse:
    properties:
      limit:
        type: integer
      locations:
        items:
          $ref: '#/definitions/models.Location'
        type: array
      query:
        type: string
    type: object
  models.SearchUsersResponse:
    properties:
      total:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: string
      name:
        type: string
      role:
        type: string
      status:
        type: string
      updated_at:
        type: string
      username:
        type: string
    type: object
  outerr.ErrorResponse:
    properties:
      code:
        type: string
      details: {}
      message:
        type: string
    type: object
info:
  contact: {}
  description: Documentation for "Where Is My City" API
  termsOfService: http://swagger.io/terms/
  title: Where Is My City
  version: 0.0.1
paths:
  /admin/users:
    post:
      consumes:
      - application/json
      description: Create user
      parameters:
      - description: Create user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Create user
      tags:
      - users
  /admin/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Empty'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Delete user
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Get user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Get user
      tags:
      - users
    patch:
      consumes:
      - application/json
      description: Patch user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Patch user request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PatchUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Patch user
      tags:
      - users
  /admin/users/search:
    get:
      consumes:
      - application/json
      description: Search users
      parameters:
      - description: Search by name
        example: '"John"'
        in: query
        name: search
        type: string
      - description: Search by email
        example: '"Xq4w9@example.com"'
        in: query
        name: email
        type: string
      - description: Search by name
        example: '"John"'
        in: query
        name: name
        type: string
      - description: Search by role
        in: query
        name: role
        type: string
      - description: Search by status
        in: query
        name: status
        type: string
      - default: 1
        description: Page number
        in: query
        minimum: 1
        name: page
        type: integer
      - default: 20
        description: Users in response
        example: 20
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      - description: Sort by field
        example: '"name"'
        in: query
        name: sort_by
        type: string
      - description: Sort direction
        example: '"asc"'
        in: query
        name: sort_dir
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchUsersResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Search users
      tags:
      - users
  /auth/login:
    post:
      consumes:
      - application/json
      description: Login
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      summary: Login
      tags:
      - auth
  /auth/refresh:
    post:
      consumes:
      - application/json
      description: Refresh token
      parameters:
      - description: Refresh token request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RefreshTokenRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      summary: Refresh token
      tags:
      - auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      summary: Register
      tags:
      - auth
  /profile:
    get:
      consumes:
      - application/json
      description: Get profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Get profile
      tags:
      - profile
    patch:
      consumes:
      - application/json
      description: Patch profile
      parameters:
      - description: Patch profile request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.PatchProfileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ProfileResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - ApiKeyAuth: []
      summary: Patch profile
      tags:
      - profile
  /search:
    get:
      consumes:
      - application/json
      description: Search for locations
      parameters:
      - description: Searching query
        example: '"New York"'
        in: query
        name: q
        required: true
        type: string
      - default: 20
        description: Locations in response
        example: 20
        in: query
        maximum: 100
        minimum: 1
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.SearchResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/outerr.ErrorResponse'
      security:
      - BasicAuth: []
      summary: Search for locations
      tags:
      - locations
securityDefinitions:
  ApiKeyAuth:
    description: 'Basic Auth "Authorization: Basic <base64 encoded username:password>"'
    in: header
    name: Authorization
    type: apiKey
  BasicAuth:
    type: basic
swagger: "2.0"
